                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6b805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7a803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: c0f2f9ffffffffffffff | 	iaddq $-7,%rdx		# len > 7?
0x03c: 764e00000000000000   |   jg Loop
0x045: 70c801000000000000   |   jmp test1
                            |   
0x04e:                      | Loop:
0x04e: 50a70000000000000000 |   mrmovq (%rdi), %r10	# read val from src...
0x058: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x062: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x064: 717700000000000000   | 	jle Npos0		# if so, goto Npos0:
0x06d: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x077:                      | Npos0:
0x077: 50a70800000000000000 |   mrmovq 8(%rdi), %r10	# read val from src...
0x081: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x08b: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x08d: 71a000000000000000   | 	jle Npos1		# if so, goto Npos1:
0x096: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0a0:                      | Npos1:
0x0a0: 50a71000000000000000 |   mrmovq 16(%rdi), %r10	# read val from src...
0x0aa: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0b4: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0b6: 71c900000000000000   | 	jle Npos2		# if so, goto Npos2:
0x0bf: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0c9:                      | Npos2:
0x0c9: 50a71800000000000000 |   mrmovq 24(%rdi), %r10	# read val from src...
0x0d3: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x0dd: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0df: 71f200000000000000   | 	jle Npos3		# if so, goto Npos3:
0x0e8: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0f2:                      | Npos3:
0x0f2: 50a72000000000000000 |   mrmovq 32(%rdi), %r10	# read val from src...
0x0fc: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x106: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x108: 711b01000000000000   | 	jle Npos4		# if so, goto Npos3:
0x111: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x11b:                      | Npos4:
0x11b: 50a72800000000000000 |   mrmovq 40(%rdi), %r10	# read val from src...
0x125: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)	# ...and store it to dst
0x12f: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x131: 714401000000000000   | 	jle Npos5		# if so, goto Npos3:
0x13a: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x144:                      | Npos5:
0x144: 50a73000000000000000 |   mrmovq 48(%rdi), %r10	# read val from src...
0x14e: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# ...and store it to dst
0x158: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x15a: 716d01000000000000   | 	jle Npos6		# if so, goto Npos3:
0x163: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x16d:                      | Npos6:
0x16d: 50a73800000000000000 |   mrmovq 56(%rdi), %r10	# read val from src...
0x177: 40a63800000000000000 | 	rmmovq %r10, 56(%rsi)	# ...and store it to dst
0x181: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x183: 719601000000000000   | 	jle Npos7		# if so, goto Npos3:
0x18c: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x196:                      | Npos7:
0x196: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x1a0: c0f74000000000000000 | 	iaddq $64, %rdi		# src++
0x1aa: c0f64000000000000000 | 	iaddq $64, %rsi		# dst++
0x1b4: c0f2f9ffffffffffffff | 	iaddq $-7,%rdx		# len > 3?
0x1be: 764e00000000000000   | 	jg Loop			# if so, goto Loop:
0x1c8:                      |   .align 8
0x1c8:                      | test1:
0x1c8: c0f20300000000000000 |   iaddq $3, %rdx
0x1d2: 72e401000000000000   |   jl T1
0x1db: 753802000000000000   |   jge T2
0x1e4:                      | T1:
0x1e4: c0f20200000000000000 |   iaddq $2, %rdx
0x1ee: 720002000000000000   |   jl L1
0x1f7: 751c02000000000000   |   jge L2
0x200:                      | L1:
0x200: c0f20100000000000000 |   iaddq $1, %rdx
0x20a: 737903000000000000   |   je P6
0x213: 70a203000000000000   |   jmp Done
0x21c:                      | L2:
0x21c: c0f2ffffffffffffffff |   iaddq $-1, %rdx
0x226: 732703000000000000   |   je P4
0x22f: 705003000000000000   |   jmp P5
0x238:                      | T2:
0x238: c0f2feffffffffffffff |   iaddq $-2, %rdx
0x242: 725402000000000000   |   jl L3
0x24b: 757002000000000000   |   jge L4
0x254:                      | L3:
0x254: c0f20100000000000000 |   iaddq $1, %rdx
0x25e: 73d502000000000000   |   je P2
0x267: 70fe02000000000000   |   jmp P3
0x270:                      | L4:
0x270: c0f2ffffffffffffffff |   iaddq $-1, %rdx
0x27a: 72ac02000000000000   |   jl P1
0x283:                      | P0:
0x283: 50a73000000000000000 |   mrmovq 48(%rdi), %r10	# read val from src...
0x28d: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# ...and store it to dst
0x297: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x299: 71ac02000000000000   | 	jle P1		# if so, goto Npos:
0x2a2: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2ac:                      | P1:
0x2ac: 50a72800000000000000 |   mrmovq 40(%rdi), %r10	# read val from src...
0x2b6: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)	# ...and store it to dst
0x2c0: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x2c2: 71d502000000000000   | 	jle P2		# if so, goto Npos:
0x2cb: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2d5:                      | P2:
0x2d5: 50a72000000000000000 |   mrmovq 32(%rdi), %r10	# read val from src...
0x2df: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x2e9: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x2eb: 71fe02000000000000   | 	jle P3		# if so, goto Npos:
0x2f4: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2fe:                      | P3:
0x2fe: 50a71800000000000000 |   mrmovq 24(%rdi), %r10	# read val from src...
0x308: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x312: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x314: 712703000000000000   | 	jle P4		# if so, goto Npos:
0x31d: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x327:                      | P4:
0x327: 50a71000000000000000 |   mrmovq 16(%rdi), %r10	# read val from src...
0x331: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x33b: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x33d: 715003000000000000   | 	jle P5		# if so, goto Npos:
0x346: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x350:                      | P5:
0x350: 50a70800000000000000 |   mrmovq 8(%rdi), %r10	# read val from src...
0x35a: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x364: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x366: 717903000000000000   | 	jle P6		# if so, goto Npos:
0x36f: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x379:                      | P6:
0x379: 50a70000000000000000 |   mrmovq (%rdi), %r10	# read val from src...
0x383: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x38d: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x38f: 71a203000000000000   | 	jle Done		# if so, goto Npos:
0x398: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3a2:                      | Done:
0x3a2: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3a3:                      | End:
                            | #/* $end ncopy-ys */
0x3a3:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3a8:                      | 	.align 8
0x3a8:                      | src:
0x3a8: 0100000000000000     | 	.quad 1
0x3b0: feffffffffffffff     | 	.quad -2
0x3b8: 0300000000000000     | 	.quad 3
0x3c0: 0400000000000000     | 	.quad 4
0x3c8: 0500000000000000     | 	.quad 5
0x3d0: 0600000000000000     | 	.quad 6
0x3d8: 0700000000000000     | 	.quad 7
0x3e0: f8ffffffffffffff     | 	.quad -8
0x3e8: f7ffffffffffffff     | 	.quad -9
0x3f0: f6ffffffffffffff     | 	.quad -10
0x3f8: 0b00000000000000     | 	.quad 11
0x400: 0c00000000000000     | 	.quad 12
0x408: 0d00000000000000     | 	.quad 13
0x410: 0e00000000000000     | 	.quad 14
0x418: 0f00000000000000     | 	.quad 15
0x420: 1000000000000000     | 	.quad 16
0x428: efffffffffffffff     | 	.quad -17
0x430: eeffffffffffffff     | 	.quad -18
0x438: edffffffffffffff     | 	.quad -19
0x440: ecffffffffffffff     | 	.quad -20
0x448: 1500000000000000     | 	.quad 21
0x450: eaffffffffffffff     | 	.quad -22
0x458: e9ffffffffffffff     | 	.quad -23
0x460: 1800000000000000     | 	.quad 24
0x468: 1900000000000000     | 	.quad 25
0x470: e6ffffffffffffff     | 	.quad -26
0x478: e5ffffffffffffff     | 	.quad -27
0x480: e4ffffffffffffff     | 	.quad -28
0x488: e3ffffffffffffff     | 	.quad -29
0x490: e2ffffffffffffff     | 	.quad -30
0x498: e1ffffffffffffff     | 	.quad -31
0x4a0: e0ffffffffffffff     | 	.quad -32
0x4a8: dfffffffffffffff     | 	.quad -33
0x4b0: deffffffffffffff     | 	.quad -34
0x4b8: 2300000000000000     | 	.quad 35
0x4c0: dcffffffffffffff     | 	.quad -36
0x4c8: 2500000000000000     | 	.quad 37
0x4d0: daffffffffffffff     | 	.quad -38
0x4d8: d9ffffffffffffff     | 	.quad -39
0x4e0: 2800000000000000     | 	.quad 40
0x4e8: 2900000000000000     | 	.quad 41
0x4f0: d6ffffffffffffff     | 	.quad -42
0x4f8: 2b00000000000000     | 	.quad 43
0x500: 2c00000000000000     | 	.quad 44
0x508: 2d00000000000000     | 	.quad 45
0x510: 2e00000000000000     | 	.quad 46
0x518: 2f00000000000000     | 	.quad 47
0x520: d0ffffffffffffff     | 	.quad -48
0x528: cfffffffffffffff     | 	.quad -49
0x530: ceffffffffffffff     | 	.quad -50
0x538: 3300000000000000     | 	.quad 51
0x540: ccffffffffffffff     | 	.quad -52
0x548: cbffffffffffffff     | 	.quad -53
0x550: 3600000000000000     | 	.quad 54
0x558: 3700000000000000     | 	.quad 55
0x560: c8ffffffffffffff     | 	.quad -56
0x568: c7ffffffffffffff     | 	.quad -57
0x570: 3a00000000000000     | 	.quad 58
0x578: c5ffffffffffffff     | 	.quad -59
0x580: c4ffffffffffffff     | 	.quad -60
0x588: 3d00000000000000     | 	.quad 61
0x590: 3e00000000000000     | 	.quad 62
0x598: 3f00000000000000     | 	.quad 63
0x5a0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x5b0:                      | 	.align 16
0x5b0:                      | Predest:
0x5b0: fadebc0000000000     | 	.quad 0xbcdefa
0x5b8:                      | dest:
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0:                      | Postdest:
0x7b0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x7b8:                      | .align 8
                            | # Run time stack
0x7b8: 0000000000000000     | 	.quad 0
0x7c0: 0000000000000000     | 	.quad 0
0x7c8: 0000000000000000     | 	.quad 0
0x7d0: 0000000000000000     | 	.quad 0
0x7d8: 0000000000000000     | 	.quad 0
0x7e0: 0000000000000000     | 	.quad 0
0x7e8: 0000000000000000     | 	.quad 0
0x7f0: 0000000000000000     | 	.quad 0
0x7f8: 0000000000000000     | 	.quad 0
0x800: 0000000000000000     | 	.quad 0
0x808: 0000000000000000     | 	.quad 0
0x810: 0000000000000000     | 	.quad 0
0x818: 0000000000000000     | 	.quad 0
0x820: 0000000000000000     | 	.quad 0
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
                            | 
0x838:                      | Stack:
