                            | # Execution begins at address 0 
0x000:                      |   .pos 0
0x000: 30f40002000000000000 |   irmovq stack, %rsp    # Set up stack pointer
0x00a: 803800000000000000   |   call main             # Execute main program
0x013: 00                   |   halt                  # Terminate program
                            | 
                            | # Array of 4 elements
0x018:                      |   .align 8
0x018:                      | data:
0x018: 0400000000000000     |   .quad 0x0000000000000004
0x020: 0300000000000000     |   .quad 0x0000000000000003
0x028: 0200000000000000     |   .quad 0x0000000000000002
0x030:                      | end:
0x030: 0100000000000000     |   .quad 0x0000000000000001
                            | 
0x038:                      | main:
0x038: 30f71800000000000000 |   irmovq data, %rdi
0x042: 30f63000000000000000 |   irmovq end, %rsi
0x04c: 805600000000000000   |   call bubble_p         # bubble_p(data, end)
0x055: 90                   |   ret
                            | 
                            | # long bubble_p(long *data, long *end)
                            | # data in %rdi, end in %rsi
                            | 
0x056:                      | bubble_p:
0x056: 70c500000000000000   | 	jmp	L2
0x05f:                      | L3:
0x05f: 30f30800000000000000 |   irmovq $8, %rbx
0x069: 6030                 |   addq %rbx, %rax
0x06b:                      | L5:
0x06b: 2002                 |   rrmovq %rax, %rdx
0x06d: 6162                 |   subq %rsi, %rdx
0x06f: 75b900000000000000   |   jge L7
0x078: 50200800000000000000 |   mrmovq 8(%rax), %rdx ## dx = x;
0x082: 50100000000000000000 |   mrmovq (%rax), %rcx  ## cx = y;
0x08c: 2023                 |   rrmovq %rdx, %rbx    ## bx = x;
0x08e: 2029                 |   rrmovq %rdx, %r9     ## r9 = x;
0x090: 2018                 |   rrmovq %rcx, %r8     ## r8 = y;
0x092: 6321                 |   xorq %rdx, %rcx      ## cx = x^y;
0x094: 2082                 |   rrmovq %r8, %rdx     ## dx = y;
0x096: 6183                 |   subq %r8, %rbx       ## bx = x-y
0x098: 2292                 |   cmovl %r9, %rdx     ## if (x>=y) dx = x else dx = y;
0x09a: 6321                 |   xorq %rdx, %rcx      ## cx = dx ^ x ^ y;
0x09c: 40100800000000000000 |   rmmovq %rcx, 8(%rax)
0x0a6: 40200000000000000000 |   rmmovq %rdx, (%rax)
0x0b0: 705f00000000000000   |   jmp L3
0x0b9:                      | L7:
0x0b9: 30f30800000000000000 |   irmovq $8, %rbx
0x0c3: 6136                 |   subq %rbx, %rsi
0x0c5:                      | L2:
0x0c5: 2060                 |   rrmovq %rsi, %rax
0x0c7: 6170                 |   subq %rdi, %rax
0x0c9: 73dd00000000000000   | 	je L8
0x0d2: 2070                 |   rrmovq %rdi, %rax
0x0d4: 706b00000000000000   |   jmp L5
0x0dd:                      | L8:
0x0dd: 90                   | 	ret
                            | 
                            | # Stack starts here and grows to lower addresses
0x200:                      |   .pos  0x200
0x200:                      | stack:
