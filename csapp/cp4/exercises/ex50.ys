# Execution begins at address 0 
  .pos 0
  irmovq stack, %rsp    # Set up stack pointer
  call main             # Execute main program
  halt                  # Terminate program

.align 8
array:
  .quad 0x0000000000000000
  .quad 0x0000000000000000
  .quad 0x0000000000000000
  .quad 0x0000000000000000
  .quad 0x0000000000000000
  .quad 0x0000000000000000
  .quad 0x0000000000000000
  .quad 0x0000000000000000

main:
  irmovq array, %r10
  irmovq $-1, %rbx
  irmovq $8, %r12
  irmovq $1, %r13
loop:
  rrmovq %rbx, %rdi
  call switchv         # switchv(-1)
  rmmovq %rax, (%r10)
  addq %r12, %r10
  addq %r13, %rbx
  rrmovq %rbx, %rax
  subq %r12, %rax
  jl loop

  ret

#table
.align 8
table:
  .quad L0
  .quad LD
  .quad L2
  .quad L3
  .quad LD
  .quad L2

# long switchv(long index)
# index in %rdi
switchv:
  irmovq table, %rcx
  irmovq $5, %rax
  subq %rdi, %rax
  jl DEF
  irmovq $0, %rax
  subq %rax, %rdi
  jl DEF
  irmovq $8, %r8
  irmovq $1, %r9

MUL:
  je ADD
  addq %r8, %rcx
  subq %r9, %rdi
  jmp MUL

ADD:
  mrmovq (%rcx), %rax
  pushq %rax
  ret

DEF:
  mrmovq 8(%rcx), %rax
  pushq %rax
  ret
LD:
  irmovq $3549, %rax
  ret
L0:
  irmovq $2730, %rax
  ret
L2:
  irmovq $3003, %rax
  ret
L3:
  irmovq $3276, %rax
  ret
# Stack starts here and grows to lower addresses
  .pos  0x200
stack:
